# 난이도 2 문제
# 이코테 p. 201

# 체크 포인트
# 1.절단기의 높이(탐색 범위)가 1부터 10억까지의 정수 중 하나 > 이진 탐색
# 2. 중간값에서 절단한 떡의 길이와 필요한 떡의 길이를 비교하면서
# 떡이 더 필요하면 중간 값을 줄이고, 떡이 너무 많이 절단되면 중간 값의 길이를 늘리는 방식.

# 해결 방법
# 1.시작점(0), 끝점(가장 긴 떡의 길이), 중간점((시작점+종료점)//2)
# 2.주어진 떡의 길이가 절단기 높이(중간점)보다 클 경우 절단 가능 - 중간점메서 떡 절단
# 3.절단한 떡의 총 길이와 필요한 떡의 총 길이 비교
# 4.절단한 떡의 길이가 부족할 경우 중간점을 줄인다. (왼쪽 탐색)
# 5.떡의 양이 충분한 경우 덜 자를 수 있는지 확인해서 최대한 덜 잘라야 함. (오른쪽

# 떡의 개수(N)와 요청한 떡의 길이(M)을 입력
n, m = list(map(int, input().split(' ')))
# 각 떡의 개별 높이 정보를 입력
array = list(map(int, input().split()))

# 이진 탐색을 위한 시작점과 끝점 설정
start = 0
end = max(array)

# 이진 탐색 수행 (반복적)
result = 0
while(start <= end):
    total = 0
    mid = (start + end) // 2
    for x in array:
        # 잘랐을 때의 떡볶이 양 계산
        if x > mid:
            total += x - mid
    # 떡볶이 양이 부족한 경우 더 많이 자르기 (오른쪽 부분 탐색)
    if total < m:
        end = mid - 1
    # 떡볶이 양이 충분한 경우 덜 자르기 (왼쪽 부분 탐색)
    else:
        result = mid  # 최대한 덜 잘랐을 때가 정답이므로, 여기에서 result에 기록
        start = mid + 1
        # 시작점을 중간점 +1 로 하는 이유?
        # 이미 이전 단계에서 중간점인 경우는 처리 했으므로
        # 다음 단계에서는 그 경우는 고려하지 않는다는 뜻임

# 정답 출력
print(result)
