# https://wikidocs.net/16038


# [얕은 복사(shallow copy)]
'''
    list의 슬라이싱을 통한 새로운 값을 할당해봅니다.
    아래의 결과와 같이 슬라이싱을 통해서 값을 할당하면 새로운 id가 부여되며, 
    ***서로 영향을 받지 않습니다.***
'''
# ! 얕은 복사가 문제 되는 경우
#   mutable객체 안에 mutable객체인 경우,
#   얕은복사에서 안쪽의 mutable 객체는 주소가 복사:  내부의 객체 id(a[0])과 id(b[0])은 같은 주소를 바라보고 있게된다.
# * 슬라이싱, copy 모듈의 copy 메소드 :  얕은 복사에 해당
'''
    import copy
    a = [[1, 2], [3, 4]]
    b = copy.copy(a)
'''

# [깊은 복사(deep copy)]
# - 깊은 복사는 내부에 객체들까지 모두 새롭게 copy 되는 것입니다
'''
    import copy
    a = [[1, 2], [3, 4]]
    b = copy.deepcopy(a)
'''

# * copy.deepcopy메소드 : 깊은 복사


# ===================================샘플 코드 ========================================

# [얕은복사 예시 : 슬라이싱]
a = [1, 2, 3]
b = a[:]
print(a == b)
print(a is b)  # 가리키는 주소 다름


# ! 얕은 복사가 문제 되는 경우
print("\n\n리스트안에 리스트 mutable객체 안에 mutable객체인 경우 문제가 됩니다. ")
a = [[1, 2], [3, 4]]
b = a[:]
print(a == b)
print(a is b)  # 가리키는 주소 다름
print(a[0] is b[0])  # !가리키는 주소 같음


print("\n가리키는 주소 같음 : a[0]내부 값 변경시 b[0]도 달라짐")
a[0][1] = 9876
print(a[0] is b[0], a, b)

print("\n리스트 자체를 재할당시, 주소 달라지므로 ")
a[0] = [1, 1, 1, 1]
print(a[0] is b[0], a, b)
